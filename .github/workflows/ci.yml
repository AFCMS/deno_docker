name: ci

on:
  # Run on any push to main or any tag
  push:
    branches:
      - main
    tags:
      - '*'
  # Run on any pull request
  pull_request:
    branches:
      - main

jobs:
  build-bin:
    name: bin
    runs-on: ubuntu-latest
    steps:
      - name: Clone repository
        uses: actions/checkout@v4
      
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver-opts: network=host
      
      - name: Build image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: bin.dockerfile
          provenance: false
          platforms: linux/amd64,linux/arm64
          push: false
          load: true
          tags: denoland/deno:bin
          cache-from: type=gha
          cache-to: type=gha,mode=max
          no-cache: ${{ github.event_name == 'push' && startsWith(github.ref, 'refs/tags/') }}
          outputs: type=docker,dest=/tmp/docker_intermediate.tar
      
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: myimage
          path: /tmp/docker_intermediate.tar

  build:
    needs: build-bin
    name: ${{ matrix.kind }}
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    strategy:
      matrix:
        kind: ["alpine", "debian", "distroless", "ubuntu"]
    steps:
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: docker_intermediate
          path: /tmp
      
      - name: Load image
        run: |
          docker load --input /tmp/docker_intermediate.tar

      - name: Clone repository
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver-opts: network=host

      - name: Build image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ${{ matrix.kind }}.dockerfile
          provenance: false
          platforms: linux/amd64,linux/arm64
          build-args: |
            BIN_IMAGE=denoland/deno:bin
          push: false
          load: true
          tags: denoland/deno:${{ matrix.kind }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          no-cache: ${{ github.event_name == 'push' && startsWith(github.ref, 'refs/tags/') }}

      #- name: Build image
      #  run: |
      #    docker buildx build -f ${{ matrix.kind }}.dockerfile --provenance=false --platform=linux/amd64,linux/arm64 --build-arg BIN_IMAGE=localhost:5000/bin -t localhost:5000/${{ matrix.kind }} --push .

      - name: Test default CMD
        run: |
          docker run -t denoland/deno:${{ matrix.kind }}

      - name: Test if entry script forwards to deno binary
        run: |
          docker run -t --platform linux/arm64 denoland/deno:${{ matrix.kind }} eval 'console.log(`Welcome to Deno ${Deno.build.arch}!`)'
          docker run -t --platform linux/amd64 denoland/deno:${{ matrix.kind }} eval 'console.log(`Welcome to Deno ${Deno.build.arch}!`)'

          # if typescript is present in the output, then probably deno --version worked
          docker run -t denoland/deno:${{ matrix.kind }} --version | grep typescript

      - name: Test if entry script forwards to other binaries
        if: ${{ matrix.kind != 'distroless' }}
        run: |
          docker run -t denoland/deno:${{ matrix.kind }} deno eval 'console.log(`Welcome to Deno ${Deno.build.arch}!`)'
          docker run -t denoland/deno:${{ matrix.kind }} echo 'test entry script'

      - name: Login to Docker Hub
        if: github.repository == 'denoland/deno_docker' && github.ref_type == 'tag'
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}
      
      - name: Login to GitHub Container Registry
        # if: github.ref_type == 'tag'
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Push named images
        if: github.repository == 'denoland/deno_docker' && github.ref_type == 'tag'
        run: |
          docker buildx imagetools create localhost:5000/${{ matrix.kind }} -t denoland/deno:${{ matrix.kind }}-${{ github.ref_name }} -t denoland/deno:${{ matrix.kind }}
          docker pull --platform linux/amd64 denoland/deno:${{ matrix.kind }}-${{ github.ref_name }} 
          docker pull --platform linux/amd64 denoland/deno:${{ matrix.kind }}
          docker pull --platform linux/arm64 denoland/deno:${{ matrix.kind }}-${{ github.ref_name }} 
          docker pull --platform linux/arm64 denoland/deno:${{ matrix.kind }}
      - name: Push bin image
        if: github.repository == 'denoland/deno_docker' && github.ref_type == 'tag' && matrix.kind == 'debian'
        run: |
          docker buildx imagetools create localhost:5000/bin -t denoland/deno:bin-${{ github.ref_name }} -t denoland/deno:bin
          docker pull --platform linux/amd64 denoland/deno:bin-${{ github.ref_name }}
          docker pull --platform linux/amd64 denoland/deno:bin
          docker pull --platform linux/arm64 denoland/deno:bin-${{ github.ref_name }}
          docker pull --platform linux/arm64 denoland/deno:bin

      - name: Push default images
        if: github.repository == 'denoland/deno_docker' && github.ref_type == 'tag' && matrix.kind == 'debian'
        run: |
          docker buildx imagetools create localhost:5000/${{ matrix.kind }} -t denoland/deno:${{ github.ref_name }} -t denoland/deno:latest
          docker pull --platform linux/amd64 denoland/deno:${{ github.ref_name }}
          docker pull --platform linux/amd64 denoland/deno:latest
          docker pull --platform linux/arm64 denoland/deno:${{ github.ref_name }}
          docker pull --platform linux/arm64 denoland/deno:latest
